#include <iostream>
#define SIZE 10

using namespace std;

class DoubleHash {
private:
  int *hashTable;
  int curr_size;

public:
  DoubleHash() {
    hashTable = new int[SIZE];
    curr_size = 0;
    for (int i = 0; i < SIZE; i++)
      hashTable[i] = -1;
  }

  // Fungsi hash pertama
  int hash1(int key) { return key % SIZE; }

  // Fungsi hash kedua
  int hash2(int key) { return (7 - (key % 7)); }

  void insertHash(int key) {
    if (curr_size == SIZE) {
      cout << "Tabel Hash sudah penuh!" << endl;
      return;
    }

    int index = hash1(key);

    // Jika ada collision, gunakan fungsi hash kedua
    if (hashTable[index] != -1) {
      int index2 = hash2(key);
      int i = 1;
      while (true) {
        int newIndex = (index + i * index2) % SIZE;
        if (hashTable[newIndex] == -1) {
          hashTable[newIndex] = key;
          break;
        }
        i++;
        if (i >= SIZE) {
          cout << "Tabel Hash sudah penuh!" << endl;
          return;
        }
      }
    } else {
      hashTable[index] = key;
    }
    curr_size++;
  }

  void displayHash() {
    cout << "Program C++ Metode Double Hashing" << endl << endl;
    for (int i = 0; i < SIZE; i++) {
      if (hashTable[i] != -1)
        cout << i << " --> " << hashTable[i] << endl;
      else
        cout << i << endl;
    }
  }
};

int main() {
  int keys[] = {45, 13, 34, 67, 23, 74};
  int n = sizeof(keys) / sizeof(keys[0]);

  DoubleHash h;

  for (int i = 0; i < n; i++)
    h.insertHash(keys[i]);

  h.displayHash();

  return 0;
}
